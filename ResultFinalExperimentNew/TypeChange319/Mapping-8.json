[{"OriginalCompleteBefore": "List<SnapshotDto> projectSnapshots=dbClient.snapshotDao().selectSnapshotsByQuery(dbTester.getSession(),new SnapshotQuery().setComponentId(componentId).setIsLast(false).setStatus(SnapshotDto.STATUS_UNPROCESSED));", "OriginalCompleteAfter": "List<SnapshotDto> projectSnapshots=dbClient.snapshotDao().selectSnapshotsByQuery(dbTester.getSession(),new SnapshotQuery().setComponentUuid(componentUuid).setIsLast(false).setStatus(SnapshotDto.STATUS_UNPROCESSED));", "Before": "new SnapshotQuery().setComponentId(componentId)", "After": "new SnapshotQuery().setComponentUuid(componentId)", "Project": "sonarqube", "Commit": "a9f33af2ab0e8a72609d7304af65758c3f39bfa7", "CompilationUnit": "org.sonar.server.computation.step.ViewsPersistSnapshotsStepTest", "LineNos": {"_1": 214, "_2": 200}, "Names": {"_1": "componentId", "_2": "componentUuid"}, "TemplateVariableToCodeBefore": {"TCIVar": "componentId", "v0": "new SnapshotQuery()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "componentId", "v0": "new SnapshotQuery()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "List<SnapshotDto> projectSnapshots=dbClient.snapshotDao().selectSnapshotsByQuery(dbTester.getSession(),new SnapshotQuery().setComponentId(componentId).setIsLast(false).setStatus(SnapshotDto.STATUS_UNPROCESSED));", "OriginalCompleteAfter": "List<SnapshotDto> projectSnapshots=dbClient.snapshotDao().selectSnapshotsByQuery(dbTester.getSession(),new SnapshotQuery().setComponentUuid(componentUuid).setIsLast(false).setStatus(SnapshotDto.STATUS_UNPROCESSED));", "Before": "new SnapshotQuery().setComponentId(componentId)", "After": "new SnapshotQuery().setComponentUuid(componentId)", "Project": "sonarqube", "Commit": "a9f33af2ab0e8a72609d7304af65758c3f39bfa7", "CompilationUnit": "org.sonar.server.computation.step.ReportPersistSnapshotsStepTest", "LineNos": {"_1": 371, "_2": 368}, "Names": {"_1": "componentId", "_2": "componentUuid"}, "TemplateVariableToCodeBefore": {"TCIVar": "componentId", "v0": "new SnapshotQuery()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "componentId", "v0": "new SnapshotQuery()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return new MeasureDto().setMetricId(metricId).setComponentId(projectId).setSnapshotId(snapshotId).setValue(value);", "OriginalCompleteAfter": "return new MeasureDto().setMetricId(metricId).setComponentUuid(componentUuid).setSnapshotId(snapshotId).setValue(value);", "Before": "new MeasureDto().setMetricId(metricId).setComponentId(projectId)", "After": "new MeasureDto().setMetricId(metricId).setComponentUuid(projectId)", "Project": "sonarqube", "Commit": "a115682465bbd4e9c46c86ea03229b4f513a78d5", "CompilationUnit": "org.sonar.server.computation.step.ViewsComputeMeasureVariationsStepTest", "LineNos": {"_1": 225, "_2": 225}, "Names": {"_1": "projectId", "_2": "componentUuid"}, "TemplateVariableToCodeBefore": {"TCIVar": "projectId", "v0": "new MeasureDto().setMetricId(metricId)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "projectId", "v0": "new MeasureDto().setMetricId(metricId)"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return new MeasureDto().setMetricId(metricId).setComponentId(projectId).setSnapshotId(snapshotId).setValue(value);", "OriginalCompleteAfter": "return new MeasureDto().setMetricId(metricId).setComponentUuid(componentUuid).setSnapshotId(snapshotId).setValue(value);", "Before": "new MeasureDto().setMetricId(metricId).setComponentId(projectId)", "After": "new MeasureDto().setMetricId(metricId).setComponentUuid(projectId)", "Project": "sonarqube", "Commit": "a115682465bbd4e9c46c86ea03229b4f513a78d5", "CompilationUnit": "org.sonar.server.computation.step.ReportComputeMeasureVariationsStepTest", "LineNos": {"_1": 321, "_2": 321}, "Names": {"_1": "projectId", "_2": "componentUuid"}, "TemplateVariableToCodeBefore": {"TCIVar": "projectId", "v0": "new MeasureDto().setMetricId(metricId)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "projectId", "v0": "new MeasureDto().setMetricId(metricId)"}, "isRelevant": "Uses", "isSafe": true}]