[{"OriginalCompleteBefore": "declUsedInRHS = ruleConsequence.getChildNodesByType(NameExpr.class).stream().map(NameExpr::getNameAsString).collect(toList())", "OriginalCompleteAfter": "declUsedInRHS = ruleConsequence.getChildNodesByType(NameExpr.class).stream().map(NameExpr::getNameAsString).collect(toSet())", "Before": "ruleConsequence.getChildNodesByType(NameExpr.class).stream().map(NameExpr::getNameAsString).collect(toList())", "After": "ruleConsequence.getChildNodesByType(NameExpr.class).stream().map(NameExpr::getNameAsString).collect(toSet())", "Project": "drools", "Commit": "4ebbf316548a85f6841800a9d9d20715eb0d72b2", "CompilationUnit": "org.drools.modelcompiler.builder.generator.ModelGenerator", "LineNos": {"_1": 292, "_2": 306}, "Names": {"_1": "declUsedInRHS", "_2": "declUsedInRHS"}, "TemplateVariableToCodeBefore": {"v0": "ruleConsequence.getChildNodesByType(NameExpr.class).stream().map(NameExpr::getNameAsString)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "ruleConsequence.getChildNodesByType(NameExpr.class).stream().map(NameExpr::getNameAsString)"}, "isRelevant": "AssignedTo", "isSafe": true}, {"OriginalCompleteBefore": "assigneeUuids = stream(iterable.spliterator(),false).map(DefaultIssue::assignee).filter(Objects::nonNull).collect(toList())", "OriginalCompleteAfter": "assigneeUuids = stream(iterable.spliterator(),false).map(DefaultIssue::assignee).filter(Objects::nonNull).collect(toSet())", "Before": "stream(iterable.spliterator(),false).map(DefaultIssue::assignee).filter(Objects::nonNull).collect(toList())", "After": "stream(iterable.spliterator(),false).map(DefaultIssue::assignee).filter(Objects::nonNull).collect(toSet())", "Project": "sonarqube", "Commit": "50957cdd8a38c05d49843298abc54fbfaaab57ab", "CompilationUnit": "org.sonar.ce.task.projectanalysis.step.SendIssueNotificationsStep", "LineNos": {"_1": 118, "_2": 119}, "Names": {"_1": "assigneeUuids", "_2": "assigneeUuids"}, "TemplateVariableToCodeBefore": {"v0": "stream(iterable.spliterator(),false).map(DefaultIssue::assignee).filter(Objects::nonNull)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "stream(iterable.spliterator(),false).map(DefaultIssue::assignee).filter(Objects::nonNull)"}, "isRelevant": "AssignedTo", "isSafe": true}]