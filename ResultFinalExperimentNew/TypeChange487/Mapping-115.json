[{"OriginalCompleteBefore": "return availableAlternativeNames(file,pattern).peek(countNumberOfFilesProcessedForPotentialErrorMessage).filter(f -> !backupExists(f)).findFirst().orElseThrow(() -> new RuntimeException(String.format(STR0,file,counter.get())));", "OriginalCompleteAfter": "return availableAlternativeNames(file,pattern).peek(countNumberOfFilesProcessedForPotentialErrorMessage).filter(f -> !backupExists(f)).findFirst().orElseThrow(noFreeBackupLocation(file,counter));", "Before": "availableAlternativeNames(file,pattern).peek(countNumberOfFilesProcessedForPotentialErrorMessage).filter(f -> !backupExists(f)).findFirst().orElseThrow(() -> new RuntimeException(String.format(STR0,file,counter.get())))", "After": "availableAlternativeNames(file,pattern).peek(countNumberOfFilesProcessedForPotentialErrorMessage).filter(f -> !backupExists(f)).findFirst().orElseThrow(noFreeBackupLocation(file,counter))", "Project": "neo4j", "Commit": "0d14f84874fe67f67d5bff45a39637dd819693cb", "CompilationUnit": "org.neo4j.backup.BackupCopyService", "LineNos": {"_1": 77, "_2": 76}, "Names": {"_1": "findAnAvailableBackupLocation", "_2": "findAnAvailableBackupLocation"}, "TemplateVariableToCodeBefore": {"v0": "availableAlternativeNames(file,pattern).peek(countNumberOfFilesProcessedForPotentialErrorMessage).filter(f -> !backupExists(f)).findFirst()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "availableAlternativeNames(file,pattern).peek(countNumberOfFilesProcessedForPotentialErrorMessage).filter(f -> !backupExists(f)).findFirst()"}, "isRelevant": "Returns", "isSafe": false}]