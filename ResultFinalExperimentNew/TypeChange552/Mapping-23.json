[{"OriginalCompleteBefore": "followedByWhitespace=tokens[i + 1].isWhitespaceBefore() || PUNCTUATION.matcher(tokens[i + 1].getToken()).matches() || Arrays.asList(endSymbols).contains(tokens[i + 1].getToken());", "OriginalCompleteAfter": "followedByWhitespace=tokens[i + 1].isWhitespaceBefore() || PUNCTUATION.matcher(tokens[i + 1].getToken()).matches() || endSymbols.contains(tokens[i + 1].getToken());", "Before": "Arrays.asList(endSymbols).contains(tokens[i + 1].getToken())", "After": "endSymbols.contains(tokens[i + 1].getToken())", "Project": "languagetool", "Commit": "a5313f79a2becccace28f77d163ef88d1690df21", "CompilationUnit": "org.languagetool.rules.GenericUnpairedBracketsRule", "LineNos": {"_1": 45, "_2": 45}, "Names": {"_1": "endSymbols", "_2": "endSymbols"}, "TemplateVariableToCodeBefore": {"TCIVar": "endSymbols", "v1": "tokens[i + 1].getToken()"}, "RelevantImports": ["java.util.Arrays"], "TemplateVariableToCodeAfter": {"TCIVar": "endSymbols", "v1": "tokens[i + 1].getToken()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "precededByWhitespace=tokens[i - 1].isSentenceStart() || tokens[i].isWhitespaceBefore() || PUNCTUATION_NO_DOT.matcher(tokens[i - 1].getToken()).matches()|| Arrays.asList(startSymbols).contains(tokens[i - 1].getToken());", "OriginalCompleteAfter": "precededByWhitespace=tokens[i - 1].isSentenceStart() || tokens[i].isWhitespaceBefore() || PUNCTUATION_NO_DOT.matcher(tokens[i - 1].getToken()).matches()|| startSymbols.contains(tokens[i - 1].getToken());", "Before": "Arrays.asList(startSymbols).contains(tokens[i - 1].getToken())", "After": "startSymbols.contains(tokens[i - 1].getToken())", "Project": "languagetool", "Commit": "a5313f79a2becccace28f77d163ef88d1690df21", "CompilationUnit": "org.languagetool.rules.GenericUnpairedBracketsRule", "LineNos": {"_1": 44, "_2": 44}, "Names": {"_1": "startSymbols", "_2": "startSymbols"}, "TemplateVariableToCodeBefore": {"TCIVar": "startSymbols", "v1": "tokens[i - 1].getToken()"}, "RelevantImports": ["java.util.Arrays"], "TemplateVariableToCodeAfter": {"TCIVar": "startSymbols", "v1": "tokens[i - 1].getToken()"}, "isRelevant": "Uses", "isSafe": true}]