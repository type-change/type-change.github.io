[{"OriginalCompleteBefore": "return Stream.of(STR0,STR1).map(ObjectArrayArguments::create).iterator();", "OriginalCompleteAfter": "return Stream.of(STR0,STR1).map(ObjectArrayArguments::create);", "Before": "Stream.of(STR0,STR1).map(ObjectArrayArguments::create).iterator()", "After": "Stream.of(STR0,STR1).map(ObjectArrayArguments::create)", "Project": "junit5", "Commit": "57359a900e8cb9d0703679be55db0cbd57b60974", "CompilationUnit": "org.junit.jupiter.params.ParamsApiPlayground.MyArgumentsProvider", "LineNos": {"_1": 82, "_2": 81}, "Names": {"_1": "arguments", "_2": "arguments"}, "TemplateVariableToCodeBefore": {"v0": "Stream.of(STR0,STR1).map(ObjectArrayArguments::create)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "Stream.of(STR0,STR1).map(ObjectArrayArguments::create)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create).iterator();", "OriginalCompleteAfter": "return Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create);", "Before": "Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create).iterator()", "After": "Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create)", "Project": "junit5", "Commit": "57359a900e8cb9d0703679be55db0cbd57b60974", "CompilationUnit": "org.junit.jupiter.params.sources.StringArgumentsProvider", "LineNos": {"_1": 37, "_2": 37}, "Names": {"_1": "arguments", "_2": "arguments"}, "TemplateVariableToCodeBefore": {"v0": "Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "Arrays.stream(lines).map(csvParser::parseLine).map(ObjectArrayArguments::create)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create).iterator();", "OriginalCompleteAfter": "return Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create);", "Before": "Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create).iterator()", "After": "Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create)", "Project": "junit5", "Commit": "57359a900e8cb9d0703679be55db0cbd57b60974", "CompilationUnit": "org.junit.jupiter.params.sources.EnumArgumentsProvider", "LineNos": {"_1": 32, "_2": 32}, "Names": {"_1": "arguments", "_2": "arguments"}, "TemplateVariableToCodeBefore": {"v0": "Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "Arrays.stream(enumClass.getEnumConstants()).map(ObjectArrayArguments::create)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return findRepeatableAnnotations(templateMethod,ArgumentsSource.class).stream().map(ArgumentsSource::value).map(ReflectionUtils::newInstance).peek(provider -> initialize(templateMethod,provider)).flatMap(ParameterizedTestExtension::toArgumentsStream).map(Arguments::getArguments).map(arguments -> toTestTemplateInvocationContext(formatter,arguments)).iterator();", "OriginalCompleteAfter": "return findRepeatableAnnotations(templateMethod,ArgumentsSource.class).stream().map(ArgumentsSource::value).map(ReflectionUtils::newInstance).peek(provider -> initialize(templateMethod,provider)).flatMap(ParameterizedTestExtension::toArgumentsStream).map(Arguments::getArguments).map(arguments -> toTestTemplateInvocationContext(formatter,arguments));", "Before": "findRepeatableAnnotations(templateMethod,ArgumentsSource.class).stream().map(ArgumentsSource::value).map(ReflectionUtils::newInstance).peek(provider -> initialize(templateMethod,provider)).flatMap(ParameterizedTestExtension::toArgumentsStream).map(Arguments::getArguments).map(arguments -> toTestTemplateInvocationContext(formatter,arguments)).iterator()", "After": "findRepeatableAnnotations(templateMethod,ArgumentsSource.class).stream().map(ArgumentsSource::value).map(ReflectionUtils::newInstance).peek(provider -> initialize(templateMethod,provider)).flatMap(ParameterizedTestExtension::toArgumentsStream).map(Arguments::getArguments).map(arguments -> toTestTemplateInvocationContext(formatter,arguments))", "Project": "junit5", "Commit": "410b47d68a199e371fc066f5274bb707938e5a79", "CompilationUnit": "org.junit.jupiter.params.ParameterizedTestExtension", "LineNos": {"_1": 54, "_2": 53}, "Names": {"_1": "provide", "_2": "provide"}, "TemplateVariableToCodeBefore": {"v0": "findRepeatableAnnotations(templateMethod,ArgumentsSource.class).stream().map(ArgumentsSource::value).map(ReflectionUtils::newInstance).peek(provider -> initialize(templateMethod,provider)).flatMap(ParameterizedTestExtension::toArgumentsStream).map(Arguments::getArguments).map(arguments -> toTestTemplateInvocationContext(formatter,arguments))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "findRepeatableAnnotations(templateMethod,ArgumentsSource.class).stream().map(ArgumentsSource::value).map(ReflectionUtils::newInstance).peek(provider -> initialize(templateMethod,provider)).flatMap(ParameterizedTestExtension::toArgumentsStream).map(Arguments::getArguments).map(arguments -> toTestTemplateInvocationContext(formatter,arguments))"}, "isRelevant": "Returns", "isSafe": true}]