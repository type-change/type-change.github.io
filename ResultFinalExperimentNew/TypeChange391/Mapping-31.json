[{"OriginalCompleteBefore": "return msgs.stream().map(HL7v2Message::fromModel).collect(Collectors.toList());", "OriginalCompleteAfter": "return msgs.stream().map(HL7v2Message::fromModel);", "Before": "msgs.stream().map(HL7v2Message::fromModel).collect(Collectors.toList())", "After": "msgs.stream().map(HL7v2Message::fromModel)", "Project": "beam", "Commit": "de53fc3acab66cc276cdddb18597a877cec1809a", "CompilationUnit": "org.apache.beam.sdk.io.gcp.healthcare.HttpHealthcareApiClient.HL7v2MessagePages.HL7v2MessagePagesIterator", "LineNos": {"_1": 442, "_2": 401}, "Names": {"_1": "next", "_2": "next"}, "TemplateVariableToCodeBefore": {"v0": "msgs.stream().map(HL7v2Message::fromModel)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "msgs.stream().map(HL7v2Message::fromModel)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return realm.getComponents().stream().map(this::entityToModel).collect(Collectors.toList());", "OriginalCompleteAfter": "return realm.getComponents().stream().map(this::entityToModel);", "Before": "realm.getComponents().stream().map(this::entityToModel).collect(Collectors.toList())", "After": "realm.getComponents().stream().map(this::entityToModel)", "Project": "keycloak", "Commit": "086f7b469610af379630ae80996221b32ef6cf6f", "CompilationUnit": "org.keycloak.models.jpa.RealmAdapter", "LineNos": {"_1": 2311, "_2": 2236}, "Names": {"_1": "getComponents", "_2": "getComponentsStream"}, "TemplateVariableToCodeBefore": {"v0": "realm.getComponents().stream().map(this::entityToModel)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "realm.getComponents().stream().map(this::entityToModel)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return listOfLists.stream().flatMap(List::stream).collect(Collectors.toList());", "OriginalCompleteAfter": "return listOfLists.stream().flatMap(List::stream);", "Before": "listOfLists.stream().flatMap(List::stream).collect(Collectors.toList())", "After": "listOfLists.stream().flatMap(List::stream)", "Project": "spring-framework", "Commit": "aaa2d2105811adf170322784b248f37e3b2a2327", "CompilationUnit": "org.springframework.test.context.support.TestPropertySourceUtils", "LineNos": {"_1": 276, "_2": 276}, "Names": {"_1": "findRepeatableAnnotations", "_2": "findRepeatableAnnotations"}, "TemplateVariableToCodeBefore": {"v0": "listOfLists.stream().flatMap(List::stream)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "listOfLists.stream().flatMap(List::stream)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return realm.getClientsStream().map(client -> toConsent(client,offlineClients)).filter(Objects::nonNull).collect(Collectors.toList());", "OriginalCompleteAfter": "return realm.getClientsStream().map(client -> toConsent(client,offlineClients)).filter(Objects::nonNull);", "Before": "realm.getClientsStream().map(client -> toConsent(client,offlineClients)).filter(Objects::nonNull).collect(Collectors.toList())", "After": "realm.getClientsStream().map(client -> toConsent(client,offlineClients)).filter(Objects::nonNull)", "Project": "keycloak", "Commit": "73d0bb34c4d8a6826e538f2a81bef515732a59c9", "CompilationUnit": "org.keycloak.services.resources.admin.UserResource", "LineNos": {"_1": 425, "_2": 417}, "Names": {"_1": "getConsents", "_2": "getConsents"}, "TemplateVariableToCodeBefore": {"v0": "realm.getClientsStream().map(client -> toConsent(client,offlineClients)).filter(Objects::nonNull)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "realm.getClientsStream().map(client -> toConsent(client,offlineClients)).filter(Objects::nonNull)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getCredentialProviders(session,CredentialProvider.class).map(CredentialProvider::getType).filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm,user,credentialType)).collect(Collectors.toList());", "OriginalCompleteAfter": "return getCredentialProviders(session,CredentialProvider.class).map(CredentialProvider::getType).filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm,user,credentialType));", "Before": "getCredentialProviders(session,CredentialProvider.class).map(CredentialProvider::getType).filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm,user,credentialType)).collect(Collectors.toList())", "After": "getCredentialProviders(session,CredentialProvider.class).map(CredentialProvider::getType).filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm,user,credentialType))", "Project": "keycloak", "Commit": "edef93cd491e545de642fd39d0df0a53cecee830", "CompilationUnit": "org.keycloak.credential.UserCredentialStoreManager", "LineNos": {"_1": 300, "_2": 293}, "Names": {"_1": "getConfiguredUserStorageCredentialTypes", "_2": "getConfiguredUserStorageCredentialTypesStream"}, "TemplateVariableToCodeBefore": {"v0": "getCredentialProviders(session,CredentialProvider.class).map(CredentialProvider::getType).filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm,user,credentialType))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getCredentialProviders(session,CredentialProvider.class).map(CredentialProvider::getType).filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm,user,credentialType))"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return s.map(entityToAdapterFunc(realm)).collect(Collectors.toList());", "OriginalCompleteAfter": "return s.map(entityToAdapterFunc(realm));", "Before": "s.map(entityToAdapterFunc(realm)).collect(Collectors.toList())", "After": "s.map(entityToAdapterFunc(realm))", "Project": "keycloak", "Commit": "feef5b4db2add4d583630674afe778b9fdc551e0", "CompilationUnit": "org.keycloak.models.map.client.MapClientProvider", "LineNos": {"_1": 287, "_2": 279}, "Names": {"_1": "searchClientsByClientId", "_2": "searchClientsByClientIdStream"}, "TemplateVariableToCodeBefore": {"v0": "s.map(entityToAdapterFunc(realm))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "s.map(entityToAdapterFunc(realm))"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getClientsStream(realm).filter(ClientModel::isAlwaysDisplayInConsole).collect(Collectors.toList());", "OriginalCompleteAfter": "return getClientsStream(realm).filter(ClientModel::isAlwaysDisplayInConsole);", "Before": "getClientsStream(realm).filter(ClientModel::isAlwaysDisplayInConsole).collect(Collectors.toList())", "After": "getClientsStream(realm).filter(ClientModel::isAlwaysDisplayInConsole)", "Project": "keycloak", "Commit": "feef5b4db2add4d583630674afe778b9fdc551e0", "CompilationUnit": "org.keycloak.models.map.client.MapClientProvider", "LineNos": {"_1": 196, "_2": 189}, "Names": {"_1": "getAlwaysDisplayInConsoleClients", "_2": "getAlwaysDisplayInConsoleClientsStream"}, "TemplateVariableToCodeBefore": {"v0": "getClientsStream(realm).filter(ClientModel::isAlwaysDisplayInConsole)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getClientsStream(realm).filter(ClientModel::isAlwaysDisplayInConsole)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return factMappings.stream().filter(predicate).collect(Collectors.toList());", "OriginalCompleteAfter": "return factMappings.stream().filter(predicate);", "Before": "factMappings.stream().filter(predicate).collect(Collectors.toList())", "After": "factMappings.stream().filter(predicate)", "Project": "drools", "Commit": "6f32e9248bbd4d55b6e5c6a90c89e484c7776f67", "CompilationUnit": "org.drools.scenariosimulation.api.model.ScesimModelDescriptor", "LineNos": {"_1": 141, "_2": 141}, "Names": {"_1": "internalFilter", "_2": "internalFilter"}, "TemplateVariableToCodeBefore": {"v0": "factMappings.stream().filter(predicate)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "factMappings.stream().filter(predicate)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return userPasswords.keySet().stream().map(userName -> createUser(realm,userName)).collect(Collectors.toList());", "OriginalCompleteAfter": "return userPasswords.keySet().stream().map(userName -> createUser(realm,userName));", "Before": "userPasswords.keySet().stream().map(userName -> createUser(realm,userName)).collect(Collectors.toList())", "After": "userPasswords.keySet().stream().map(userName -> createUser(realm,userName))", "Project": "keycloak", "Commit": "aa4673517308a2f6b8214b192eb2151554564718", "CompilationUnit": "org.keycloak.testsuite.federation.UserMapStorage", "LineNos": {"_1": 295, "_2": 293}, "Names": {"_1": "getUsers", "_2": "getUsersStream"}, "TemplateVariableToCodeBefore": {"v0": "userPasswords.keySet().stream().map(userName -> createUser(realm,userName))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "userPasswords.keySet().stream().map(userName -> createUser(realm,userName))"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username)).collect(Collectors.toList());", "OriginalCompleteAfter": "return users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username));", "Before": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username)).collect(Collectors.toList())", "After": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username))", "Project": "keycloak", "Commit": "aa4673517308a2f6b8214b192eb2151554564718", "CompilationUnit": "org.keycloak.testsuite.federation.BackwardsCompatibilityUserStorage", "LineNos": {"_1": 326, "_2": 323}, "Names": {"_1": "getUsers", "_2": "getUsersStream"}, "TemplateVariableToCodeBefore": {"v0": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username))"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return this.domains.keySet().stream().sorted().collect(Collectors.toList());", "OriginalCompleteAfter": "return this.domains.keySet().stream().sorted();", "Before": "this.domains.keySet().stream().sorted().collect(Collectors.toList())", "After": "this.domains.keySet().stream().sorted()", "Project": "cas", "Commit": "9908543b4aa92f74f53e5e948c36964df34c474e", "CompilationUnit": "org.apereo.cas.services.domain.DomainServicesManager", "LineNos": {"_1": 82, "_2": 82}, "Names": {"_1": "getDomains", "_2": "getDomains"}, "TemplateVariableToCodeBefore": {"v0": "this.domains.keySet().stream().sorted()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "this.domains.keySet().stream().sorted()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(c -> c.group.groupKey.equalsIgnoreCase(STR0) || BOLT.equals(c.type.apply(params::get))).collect(Collectors.toList());", "OriginalCompleteAfter": "return allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(c -> c.group.groupKey.equalsIgnoreCase(STR0) || BOLT.equals(c.type.apply(params::get)));", "Before": "allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(c -> c.group.groupKey.equalsIgnoreCase(STR0) || BOLT.equals(c.type.apply(params::get))).collect(Collectors.toList())", "After": "allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(c -> c.group.groupKey.equalsIgnoreCase(STR0) || BOLT.equals(c.type.apply(params::get)))", "Project": "neo4j", "Commit": "3969727ae46d9bc55dbbd61c1fa15c9f731fb28d", "CompilationUnit": "org.neo4j.kernel.configuration.Config", "LineNos": {"_1": 524, "_2": 524}, "Names": {"_1": "boltConnectors", "_2": "boltConnectors"}, "TemplateVariableToCodeBefore": {"v0": "allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(c -> c.group.groupKey.equalsIgnoreCase(STR0) || BOLT.equals(c.type.apply(params::get)))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(c -> c.group.groupKey.equalsIgnoreCase(STR0) || BOLT.equals(c.type.apply(params::get)))"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return stream.map((pair) -> pair.second).collect(Collectors.toList());", "OriginalCompleteAfter": "return stream.map((pair) -> pair.second);", "Before": "stream.map((pair) -> pair.second).collect(Collectors.toList())", "After": "stream.map((pair) -> pair.second)", "Project": "orientdb", "Commit": "bbca29f4b666b82d03b7aa734483fbfc2c31ed83", "CompilationUnit": "com.orientechnologies.orient.core.index.engine.v1.OCellBTreeMultiValueIndexEngine", "LineNos": {"_1": 274, "_2": 275}, "Names": {"_1": "get", "_2": "get"}, "TemplateVariableToCodeBefore": {"v0": "stream.map((pair) -> pair.second)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "stream.map((pair) -> pair.second)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return stream.map((pair) -> pair.second).collect(Collectors.toList());", "OriginalCompleteAfter": "return stream.map((pair) -> pair.second);", "Before": "stream.map((pair) -> pair.second).collect(Collectors.toList())", "After": "stream.map((pair) -> pair.second)", "Project": "orientdb", "Commit": "bbca29f4b666b82d03b7aa734483fbfc2c31ed83", "CompilationUnit": "com.orientechnologies.orient.core.index.engine.v1.OCellBTreeMultiValueIndexEngine", "LineNos": {"_1": 274, "_2": 275}, "Names": {"_1": "get", "_2": "get"}, "TemplateVariableToCodeBefore": {"v0": "stream.map((pair) -> pair.second)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "stream.map((pair) -> pair.second)"}, "isRelevant": "Returns", "isSafe": true}]