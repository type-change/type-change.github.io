[{"OriginalCompleteBefore": "return flow.getExecutions().stream().filter(e -> getId().equals(e.getRealm().getId())).map(this::entityToModel).sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON).collect(Collectors.collectingAndThen(Collectors.toList(),Collections::unmodifiableList));", "OriginalCompleteAfter": "return flow.getExecutions().stream().filter(e -> getId().equals(e.getRealm().getId())).map(this::entityToModel).sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON);", "Before": "flow.getExecutions().stream().filter(e -> getId().equals(e.getRealm().getId())).map(this::entityToModel).sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON).collect(Collectors.collectingAndThen(Collectors.toList(),Collections::unmodifiableList))", "After": "flow.getExecutions().stream().filter(e -> getId().equals(e.getRealm().getId())).map(this::entityToModel).sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON)", "Project": "keycloak", "Commit": "086f7b469610af379630ae80996221b32ef6cf6f", "CompilationUnit": "org.keycloak.models.jpa.RealmAdapter", "LineNos": {"_1": 1727, "_2": 1671}, "Names": {"_1": "getAuthenticationExecutions", "_2": "getAuthenticationExecutionsStream"}, "TemplateVariableToCodeBefore": {"v0": "flow.getExecutions().stream().filter(e -> getId().equals(e.getRealm().getId())).map(this::entityToModel).sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "flow.getExecutions().stream().filter(e -> getId().equals(e.getRealm().getId())).map(this::entityToModel).sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return realm.getAuthenticationFlows().stream().map(this::entityToModel).collect(Collectors.collectingAndThen(Collectors.toList(),Collections::unmodifiableList));", "OriginalCompleteAfter": "return realm.getAuthenticationFlows().stream().map(this::entityToModel);", "Before": "realm.getAuthenticationFlows().stream().map(this::entityToModel).collect(Collectors.collectingAndThen(Collectors.toList(),Collections::unmodifiableList))", "After": "realm.getAuthenticationFlows().stream().map(this::entityToModel)", "Project": "keycloak", "Commit": "086f7b469610af379630ae80996221b32ef6cf6f", "CompilationUnit": "org.keycloak.models.jpa.RealmAdapter", "LineNos": {"_1": 1632, "_2": 1583}, "Names": {"_1": "getAuthenticationFlows", "_2": "getAuthenticationFlowsStream"}, "TemplateVariableToCodeBefore": {"v0": "realm.getAuthenticationFlows().stream().map(this::entityToModel)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "realm.getAuthenticationFlows().stream().map(this::entityToModel)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return ref.getGroups().stream().map(g -> session.groups().getGroupById(realm,g.getId())).sorted(Comparator.comparing(GroupModel::getName)).collect(Collectors.collectingAndThen(Collectors.toList(),Collections::unmodifiableList));", "OriginalCompleteAfter": "return ref.getGroups().stream().map(g -> session.groups().getGroupById(realm,g.getId())).sorted(Comparator.comparing(GroupModel::getName));", "Before": "ref.getGroups().stream().map(g -> session.groups().getGroupById(realm,g.getId())).sorted(Comparator.comparing(GroupModel::getName)).collect(Collectors.collectingAndThen(Collectors.toList(),Collections::unmodifiableList))", "After": "ref.getGroups().stream().map(g -> session.groups().getGroupById(realm,g.getId())).sorted(Comparator.comparing(GroupModel::getName))", "Project": "keycloak", "Commit": "d59a74c364e9cee1fdfaf2fc7de21c9ecb1e5c6f", "CompilationUnit": "org.keycloak.models.jpa.JpaRealmProvider", "LineNos": {"_1": 422, "_2": 420}, "Names": {"_1": "getGroups", "_2": "getGroupsStream"}, "TemplateVariableToCodeBefore": {"v0": "ref.getGroups().stream().map(g -> session.groups().getGroupById(realm,g.getId())).sorted(Comparator.comparing(GroupModel::getName))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "ref.getGroups().stream().map(g -> session.groups().getGroupById(realm,g.getId())).sorted(Comparator.comparing(GroupModel::getName))"}, "isRelevant": "Returns", "isSafe": true}]