[{"OriginalCompleteBefore": "ObjectHelper.ifNotEmpty(body,exchange.getIn()::setBody);", "OriginalCompleteAfter": "ObjectHelper.ifNotEmpty(body.get(),exchange.getIn()::setBody);", "Before": "body", "After": "body.get()", "Project": "camel", "Commit": "5ee10bb51b086de7350ff86b8ffe6f58990ad29a", "CompilationUnit": "org.apache.camel.builder.DefaultFluentProducerTemplate", "LineNos": {"_1": 45, "_2": 45}, "Names": {"_1": "body", "_2": "body"}, "TemplateVariableToCodeBefore": {"TCIVar": "body"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "body"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "ObjectHelper.ifNotEmpty(headers,exchange.getIn().getHeaders()::putAll);", "OriginalCompleteAfter": "ObjectHelper.ifNotEmpty(headers.get(),exchange.getIn().getHeaders()::putAll);", "Before": "headers", "After": "headers.get()", "Project": "camel", "Commit": "5ee10bb51b086de7350ff86b8ffe6f58990ad29a", "CompilationUnit": "org.apache.camel.builder.DefaultFluentProducerTemplate", "LineNos": {"_1": 44, "_2": 44}, "Names": {"_1": "headers", "_2": "headers"}, "TemplateVariableToCodeBefore": {"TCIVar": "headers"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "headers"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "if(ObjectHelper.isNotEmpty(headers))", "OriginalCompleteAfter": "if(ObjectHelper.isNotEmpty(headers.get()))", "Before": "headers", "After": "headers.get()", "Project": "camel", "Commit": "5ee10bb51b086de7350ff86b8ffe6f58990ad29a", "CompilationUnit": "org.apache.camel.builder.DefaultFluentProducerTemplate", "LineNos": {"_1": 44, "_2": 44}, "Names": {"_1": "headers", "_2": "headers"}, "TemplateVariableToCodeBefore": {"TCIVar": "headers"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "headers"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return properties.entrySet().stream().sorted((e1,e2) -> e1.getKey().compareTo(e2.getKey())).map(e -> e.getKey() + STR0 + e.getValue()).collect(Collectors.joining(STR1));", "OriginalCompleteAfter": "return properties.get().entrySet().stream().sorted((e1,e2) -> e1.getKey().compareTo(e2.getKey())).map(e -> e.getKey() + STR0 + e.getValue()).collect(Collectors.joining(STR1));", "Before": "properties", "After": "properties.get()", "Project": "keycloak", "Commit": "7d4255b2a15a487e937122bf942bd99fa4b564c7", "CompilationUnit": "org.keycloak.testsuite.model.Config", "LineNos": {"_1": 37, "_2": 37}, "Names": {"_1": "properties", "_2": "properties"}, "TemplateVariableToCodeBefore": {"TCIVar": "properties"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "properties"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return properties.get(spiName + STR0);", "OriginalCompleteAfter": "return properties.get().get(spiName + STR0);", "Before": "properties", "After": "properties.get()", "Project": "keycloak", "Commit": "7d4255b2a15a487e937122bf942bd99fa4b564c7", "CompilationUnit": "org.keycloak.testsuite.model.Config", "LineNos": {"_1": 37, "_2": 37}, "Names": {"_1": "properties", "_2": "properties"}, "TemplateVariableToCodeBefore": {"TCIVar": "properties"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "properties"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return String.format(STR0,PROGRESS_MESSAGE_NUMBER_FORMATTER.format(completedActions.size()),PROGRESS_MESSAGE_NUMBER_FORMATTER.format(exclusiveTestsCount + enqueuedActions.size()));", "OriginalCompleteAfter": "return String.format(STR0,PROGRESS_MESSAGE_NUMBER_FORMATTER.get().format(completedActions.size()),PROGRESS_MESSAGE_NUMBER_FORMATTER.get().format(exclusiveTestsCount + enqueuedActions.size()));", "Before": "PROGRESS_MESSAGE_NUMBER_FORMATTER", "After": "PROGRESS_MESSAGE_NUMBER_FORMATTER.get()", "Project": "bazel", "Commit": "90729a57a865c08fe561be6a49734582becfbb53", "CompilationUnit": "com.google.devtools.build.lib.buildtool.ExecutionProgressReceiver", "LineNos": {"_1": 49, "_2": 49}, "Names": {"_1": "PROGRESS_MESSAGE_NUMBER_FORMATTER", "_2": "PROGRESS_MESSAGE_NUMBER_FORMATTER"}, "TemplateVariableToCodeBefore": {"TCIVar": "PROGRESS_MESSAGE_NUMBER_FORMATTER"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "PROGRESS_MESSAGE_NUMBER_FORMATTER"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return String.format(STR0,PROGRESS_MESSAGE_NUMBER_FORMATTER.format(completedActions.size()),PROGRESS_MESSAGE_NUMBER_FORMATTER.format(exclusiveTestsCount + enqueuedActions.size()));", "OriginalCompleteAfter": "return String.format(STR0,PROGRESS_MESSAGE_NUMBER_FORMATTER.get().format(completedActions.size()),PROGRESS_MESSAGE_NUMBER_FORMATTER.get().format(exclusiveTestsCount + enqueuedActions.size()));", "Before": "PROGRESS_MESSAGE_NUMBER_FORMATTER", "After": "PROGRESS_MESSAGE_NUMBER_FORMATTER.get()", "Project": "bazel", "Commit": "90729a57a865c08fe561be6a49734582becfbb53", "CompilationUnit": "com.google.devtools.build.lib.buildtool.ExecutionProgressReceiver", "LineNos": {"_1": 49, "_2": 49}, "Names": {"_1": "PROGRESS_MESSAGE_NUMBER_FORMATTER", "_2": "PROGRESS_MESSAGE_NUMBER_FORMATTER"}, "TemplateVariableToCodeBefore": {"TCIVar": "PROGRESS_MESSAGE_NUMBER_FORMATTER"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "PROGRESS_MESSAGE_NUMBER_FORMATTER"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "fm=EMPTY_MASK_ARRAY_PLACEHOLDER;", "OriginalCompleteAfter": "temp=EMPTY_MASK_ARRAY_PLACEHOLDER.get();", "Before": "EMPTY_MASK_ARRAY_PLACEHOLDER", "After": "EMPTY_MASK_ARRAY_PLACEHOLDER.get()", "Project": "nd4j", "Commit": "b599cb9f3a15a7a99e6d0f98a1253e7f144fd592", "CompilationUnit": "org.nd4j.linalg.dataset.MultiDataSet", "LineNos": {"_1": 18, "_2": 16}, "Names": {"_1": "EMPTY_MASK_ARRAY_PLACEHOLDER", "_2": "EMPTY_MASK_ARRAY_PLACEHOLDER"}, "TemplateVariableToCodeBefore": {"TCIVar": "EMPTY_MASK_ARRAY_PLACEHOLDER"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "EMPTY_MASK_ARRAY_PLACEHOLDER"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "List<SHA1Result> results=client.getSHA1(mountPoint,ImmutableList.of(normalizePathArg(entry)));", "OriginalCompleteAfter": "List<SHA1Result> results=client.get().getSHA1(mountPoint,ImmutableList.of(normalizePathArg(entry)));", "Before": "client", "After": "client.get()", "Project": "buck", "Commit": "e3c0eab936b0e9bc90c8ca1f4e019f6f40827922", "CompilationUnit": "com.facebook.buck.eden.EdenMount", "LineNos": {"_1": 38, "_2": 38}, "Names": {"_1": "client", "_2": "client"}, "TemplateVariableToCodeBefore": {"TCIVar": "client"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "client"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return client.listMounts();", "OriginalCompleteAfter": "return clientFactory.get().listMounts();", "Before": "client", "After": "client.get()", "Project": "buck", "Commit": "e3c0eab936b0e9bc90c8ca1f4e019f6f40827922", "CompilationUnit": "com.facebook.buck.eden.EdenClient", "LineNos": {"_1": 42, "_2": 48}, "Names": {"_1": "client", "_2": "clientFactory"}, "TemplateVariableToCodeBefore": {"TCIVar": "client"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "client"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "timeProvider.advanceMillis(2000);", "OriginalCompleteAfter": "timeProvider.get().advanceMillis(2000);", "Before": "timeProvider", "After": "timeProvider.get()", "Project": "Chronicle-Queue", "Commit": "4d9c427976c41fa62f21858a1753705b98e2f4e5", "CompilationUnit": "net.openhft.chronicle.queue.impl.single.RollCycleMultiThreadStressTest", "LineNos": {"_1": 61, "_2": 60}, "Names": {"_1": "timeProvider", "_2": "timeProvider"}, "TemplateVariableToCodeBefore": {"TCIVar": "timeProvider"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "timeProvider"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "timeProvider.advanceMillis(50);", "OriginalCompleteAfter": "timeProvider.get().advanceMillis(50);", "Before": "timeProvider", "After": "timeProvider.get()", "Project": "Chronicle-Queue", "Commit": "4d9c427976c41fa62f21858a1753705b98e2f4e5", "CompilationUnit": "net.openhft.chronicle.queue.impl.single.RollCycleMultiThreadStressTest", "LineNos": {"_1": 61, "_2": 60}, "Names": {"_1": "timeProvider", "_2": "timeProvider"}, "TemplateVariableToCodeBefore": {"TCIVar": "timeProvider"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "timeProvider"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "timeProvider.advanceMillis(1000);", "OriginalCompleteAfter": "timeProvider.get().advanceMillis(1000);", "Before": "timeProvider", "After": "timeProvider.get()", "Project": "Chronicle-Queue", "Commit": "4d9c427976c41fa62f21858a1753705b98e2f4e5", "CompilationUnit": "net.openhft.chronicle.queue.impl.single.RollCycleMultiThreadStressTest", "LineNos": {"_1": 61, "_2": 60}, "Names": {"_1": "timeProvider", "_2": "timeProvider"}, "TemplateVariableToCodeBefore": {"TCIVar": "timeProvider"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "timeProvider"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "timeProvider.advanceMillis(WRITE_ONE_THEN_WAIT_MS);", "OriginalCompleteAfter": "timeProvider.get().advanceMillis(WRITE_ONE_THEN_WAIT_MS);", "Before": "timeProvider", "After": "timeProvider.get()", "Project": "Chronicle-Queue", "Commit": "4d9c427976c41fa62f21858a1753705b98e2f4e5", "CompilationUnit": "net.openhft.chronicle.queue.impl.single.RollCycleMultiThreadStressTest", "LineNos": {"_1": 61, "_2": 60}, "Names": {"_1": "timeProvider", "_2": "timeProvider"}, "TemplateVariableToCodeBefore": {"TCIVar": "timeProvider"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "timeProvider"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "timeProvider.advanceMillis(1);", "OriginalCompleteAfter": "timeProvider.get().advanceMillis(1);", "Before": "timeProvider", "After": "timeProvider.get()", "Project": "Chronicle-Queue", "Commit": "4d9c427976c41fa62f21858a1753705b98e2f4e5", "CompilationUnit": "net.openhft.chronicle.queue.impl.single.RollCycleMultiThreadStressTest", "LineNos": {"_1": 61, "_2": 60}, "Names": {"_1": "timeProvider", "_2": "timeProvider"}, "TemplateVariableToCodeBefore": {"TCIVar": "timeProvider"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "timeProvider"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "String timestampPrefix=DATE_FORMAT.format(new Date(event.getTimestampMillis())) + STR0;", "OriginalCompleteAfter": "String timestampPrefix=DATE_FORMAT.get().format(new Date(event.getTimestampMillis())) + STR0;", "Before": "DATE_FORMAT", "After": "DATE_FORMAT.get()", "Project": "buck", "Commit": "9d1d8b9e6412f2f6ddd1b0db32998111339014a6", "CompilationUnit": "com.facebook.buck.distributed.DistBuildUtil", "LineNos": {"_1": 52, "_2": 52}, "Names": {"_1": "DATE_FORMAT", "_2": "DATE_FORMAT"}, "TemplateVariableToCodeBefore": {"TCIVar": "DATE_FORMAT"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "DATE_FORMAT"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "bindNullOrString(parameterIndex,x == null ? null : ISO8601_FORMAT.format(x));", "OriginalCompleteAfter": "bindNullOrString(parameterIndex,x == null ? null : ISO8601_FORMAT.get().format(x));", "Before": "ISO8601_FORMAT", "After": "ISO8601_FORMAT.get()", "Project": "requery", "Commit": "dee07f4e7683bb159cb7b62cc6ae817d191f415a", "CompilationUnit": "io.requery.android.sqlite.BasePreparedStatement", "LineNos": {"_1": 59, "_2": 59}, "Names": {"_1": "ISO8601_FORMAT", "_2": "ISO8601_FORMAT"}, "TemplateVariableToCodeBefore": {"TCIVar": "ISO8601_FORMAT"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "ISO8601_FORMAT"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "assertThat(getLogsForThread(listAppender)).hasSize(1).element(0).isEqualTo(FAILED_TO_READ_MESSAGE);", "OriginalCompleteAfter": "assertThat(getLogsForThread(listAppender.get())).hasSize(1).element(0).isEqualTo(FAILED_TO_READ_MESSAGE);", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "assertThat(getLogsForThread(listAppender)).hasSize(1).element(0).isEqualTo(WRONG_VERSION_MESSAGE);", "OriginalCompleteAfter": "assertThat(getLogsForThread(listAppender.get())).hasSize(1).element(0).isEqualTo(WRONG_VERSION_MESSAGE);", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "assertThat(getLogsForThread(listAppender)).hasSize(0);", "OriginalCompleteAfter": "assertThat(getLogsForThread(listAppender.get())).hasSize(0);", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "assertThat(getLogsForThread(listAppender)).hasSize(0);", "OriginalCompleteAfter": "assertThat(getLogsForThread(listAppender.get())).hasSize(0);", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "assertThat(getLogsForThread(listAppender)).hasSize(0);", "OriginalCompleteAfter": "assertThat(getLogsForThread(listAppender.get())).hasSize(0);", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "assertThat(getLogsForThread(listAppender)).hasSize(1).element(0).isEqualTo(WRONG_VERSION_MESSAGE);", "OriginalCompleteAfter": "assertThat(getLogsForThread(listAppender.get())).hasSize(1).element(0).isEqualTo(WRONG_VERSION_MESSAGE);", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "listAppender.start();", "OriginalCompleteAfter": "listAppender.get().start();", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "listAppender.setName(loggerName.get());", "OriginalCompleteAfter": "listAppender.get().setName(loggerName.get());", "Before": "listAppender", "After": "listAppender.get()", "Project": "FluentLenium", "Commit": "9da31e6af2c1d4f4f9fdb1ab962ee36344f419cf", "CompilationUnit": "org.fluentlenium.utils.SeleniumVersionCheckerLoggerTest", "LineNos": {"_1": 22, "_2": 23}, "Names": {"_1": "listAppender", "_2": "listAppender"}, "TemplateVariableToCodeBefore": {"TCIVar": "listAppender"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "listAppender"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return String.format(DIR_NAME_TEMPLATE,DIR_DATE_FORMAT.format(getTimestampMillis()),getSubCommand(),getBuildId());", "OriginalCompleteAfter": "return String.format(DIR_NAME_TEMPLATE,DIR_DATE_FORMAT.get().format(getTimestampMillis()),getSubCommand(),getBuildId());", "Before": "DIR_DATE_FORMAT", "After": "DIR_DATE_FORMAT.get()", "Project": "buck", "Commit": "f45c6faff666142b7d67d5e1d2a5b307b2968989", "CompilationUnit": "com.facebook.buck.log.AbstractInvocationInfo", "LineNos": {"_1": 35, "_2": 35}, "Names": {"_1": "DIR_DATE_FORMAT", "_2": "DIR_DATE_FORMAT"}, "TemplateVariableToCodeBefore": {"TCIVar": "DIR_DATE_FORMAT"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "DIR_DATE_FORMAT"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "Object instance=injector.newInstance(field.getType());", "OriginalCompleteAfter": "Object instance=injector.get().newInstance(field.getType());", "Before": "injector", "After": "injector.get()", "Project": "FluentLenium", "Commit": "a4e8ebd0741b3d80878209a62cd17715678bd39c", "CompilationUnit": "org.fluentlenium.adapter.cucumber.FluentTestContainer", "LineNos": {"_1": 32, "_2": 29}, "Names": {"_1": "injector", "_2": "injector"}, "TemplateVariableToCodeBefore": {"TCIVar": "injector"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "injector"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "if(isNull(fluentAdapter))", "OriginalCompleteAfter": "if(isNull(fluentAdapter.get()))", "Before": "fluentAdapter", "After": "fluentAdapter.get()", "Project": "FluentLenium", "Commit": "a4e8ebd0741b3d80878209a62cd17715678bd39c", "CompilationUnit": "org.fluentlenium.adapter.cucumber.FluentTestContainer", "LineNos": {"_1": 29, "_2": 26}, "Names": {"_1": "fluentAdapter", "_2": "fluentAdapter"}, "TemplateVariableToCodeBefore": {"TCIVar": "fluentAdapter"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "fluentAdapter"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "output.computeError(target,1.0);", "OriginalCompleteAfter": "output.computeError(target.get(),1.0);", "Before": "target", "After": "target.get()", "Project": "smile", "Commit": "a80ad9b6378c8dfbe94cf6534b85fdae2c219b76", "CompilationUnit": "smile.base.mlp.MultilayerPerceptron", "LineNos": {"_1": 55, "_2": 56}, "Names": {"_1": "target", "_2": "target"}, "TemplateVariableToCodeBefore": {"TCIVar": "target"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "target"}, "isRelevant": "Uses", "isSafe": true}]