[{"OriginalCompleteBefore": "executorService=executorServiceSupplier.get();", "OriginalCompleteAfter": "executorService.set(executorServiceSupplier.get());", "Before": "executorService=executorServiceSupplier.get()", "After": "executorService.set(executorServiceSupplier.get())", "Project": "geode", "Commit": "42726bd99c9ebb57ec5d3e987d47ecae9f4ea3a7", "CompilationUnit": "org.apache.geode.management.internal.FederatingManager", "LineNos": {"_1": 82, "_2": 77}, "Names": {"_1": "executorService", "_2": "executorService"}, "TemplateVariableToCodeBefore": {"TCIVar": "executorService", "v0": "executorServiceSupplier.get()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "executorService", "v0": "executorServiceSupplier.get()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "flushedLsn=readFlushedLSN();", "OriginalCompleteAfter": "flushedLsn.set(readFlushedLSN());", "Before": "flushedLsn=readFlushedLSN()", "After": "flushedLsn.set(readFlushedLSN())", "Project": "orientdb", "Commit": "b8f7ded3dbf62c81ae9d5460f91229fac864fe4d", "CompilationUnit": "com.orientechnologies.orient.core.storage.impl.local.paginated.wal.ODiskWriteAheadLog", "LineNos": {"_1": 78, "_2": 86}, "Names": {"_1": "flushedLsn", "_2": "flushedLsn"}, "TemplateVariableToCodeBefore": {"TCIVar": "flushedLsn", "v0": "readFlushedLSN()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "flushedLsn", "v0": "readFlushedLSN()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "m_configProperties=m_configRepository.getConfig();", "OriginalCompleteAfter": "m_configProperties.set(m_configRepository.getConfig());", "Before": "m_configProperties=m_configRepository.getConfig()", "After": "m_configProperties.set(m_configRepository.getConfig())", "Project": "apollo", "Commit": "c6b4dd501b5b7f6413270a3c1ea56bebef54e2eb", "CompilationUnit": "com.ctrip.apollo.internals.DefaultConfig", "LineNos": {"_1": 28, "_2": 29}, "Names": {"_1": "m_configProperties", "_2": "m_configProperties"}, "TemplateVariableToCodeBefore": {"TCIVar": "m_configProperties", "v0": "m_configRepository.getConfig()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "m_configProperties", "v0": "m_configRepository.getConfig()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "mRequest=createRequest(msg);", "OriginalCompleteAfter": "mRequest.set(createRequest(msg));", "Before": "mRequest=createRequest(msg)", "After": "mRequest.set(createRequest(msg))", "Project": "alluxio", "Commit": "900ed0bf67a616d035dd21c1f85761561ede27da", "CompilationUnit": "alluxio.worker.netty.AbstractWriteHandler", "LineNos": {"_1": 150, "_2": 154}, "Names": {"_1": "mRequest", "_2": "mRequest"}, "TemplateVariableToCodeBefore": {"TCIVar": "mRequest", "v0": "createRequest(msg)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "mRequest", "v0": "createRequest(msg)"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "mRequest=createRequest(msg);", "OriginalCompleteAfter": "mRequest.set(createRequest(msg));", "Before": "mRequest=createRequest(msg)", "After": "mRequest.set(createRequest(msg))", "Project": "alluxio", "Commit": "900ed0bf67a616d035dd21c1f85761561ede27da", "CompilationUnit": "alluxio.worker.netty.AbstractReadHandler", "LineNos": {"_1": 156, "_2": 158}, "Names": {"_1": "mRequest", "_2": "mRequest"}, "TemplateVariableToCodeBefore": {"TCIVar": "mRequest", "v0": "createRequest(msg)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "mRequest", "v0": "createRequest(msg)"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withStop=spy(new WithStop(STR0 + vm.getId()));", "OriginalCompleteAfter": "withStop.set(spy(new WithStop(STR0 + vm.getId())));", "Before": "withStop=spy(new WithStop(STR0 + vm.getId()))", "After": "withStop.set(spy(new WithStop(STR0 + vm.getId())))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithStopInRemoteVm", "LineNos": {"_1": 538, "_2": 553}, "Names": {"_1": "withStop", "_2": "withStop"}, "TemplateVariableToCodeBefore": {"TCIVar": "withStop", "v0": "spy(new WithStop(STR0 + vm.getId()))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withStop", "v0": "spy(new WithStop(STR0 + vm.getId()))"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withStop=spy(new WithStop());", "OriginalCompleteAfter": "withStop.set(spy(new WithStop()));", "Before": "withStop=spy(new WithStop())", "After": "withStop.set(spy(new WithStop()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithStopInLocalVm", "LineNos": {"_1": 519, "_2": 533}, "Names": {"_1": "withStop", "_2": "withStop"}, "TemplateVariableToCodeBefore": {"TCIVar": "withStop", "v0": "spy(new WithStop())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withStop", "v0": "spy(new WithStop())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withStop=spy(new WithStop(STR0 + vm.getId()));", "OriginalCompleteAfter": "withStop.set(spy(new WithStop(STR0 + vm.getId())));", "Before": "withStop=spy(new WithStop(STR0 + vm.getId()))", "After": "withStop.set(spy(new WithStop(STR0 + vm.getId())))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithStopInEachVm", "LineNos": {"_1": 562, "_2": 578}, "Names": {"_1": "withStop", "_2": "withStop"}, "TemplateVariableToCodeBefore": {"TCIVar": "withStop", "v0": "spy(new WithStop(STR0 + vm.getId()))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withStop", "v0": "spy(new WithStop(STR0 + vm.getId()))"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withDisconnect=spy(new WithDisconnect(STR0 + vm.getId()));", "OriginalCompleteAfter": "withDisconnect.set(spy(new WithDisconnect(STR0 + vm.getId())));", "Before": "withDisconnect=spy(new WithDisconnect(STR0 + vm.getId()))", "After": "withDisconnect.set(spy(new WithDisconnect(STR0 + vm.getId())))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithDisconnectInRemoteVm", "LineNos": {"_1": 467, "_2": 479}, "Names": {"_1": "withDisconnect", "_2": "withDisconnect"}, "TemplateVariableToCodeBefore": {"TCIVar": "withDisconnect", "v0": "spy(new WithDisconnect(STR0 + vm.getId()))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withDisconnect", "v0": "spy(new WithDisconnect(STR0 + vm.getId()))"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withDisconnect=spy(new WithDisconnect());", "OriginalCompleteAfter": "withDisconnect.set(spy(new WithDisconnect()));", "Before": "withDisconnect=spy(new WithDisconnect())", "After": "withDisconnect.set(spy(new WithDisconnect()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithDisconnectInLocalVm", "LineNos": {"_1": 448, "_2": 459}, "Names": {"_1": "withDisconnect", "_2": "withDisconnect"}, "TemplateVariableToCodeBefore": {"TCIVar": "withDisconnect", "v0": "spy(new WithDisconnect())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withDisconnect", "v0": "spy(new WithDisconnect())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withDisconnect=spy(new WithDisconnect(STR0 + vm.getId()));", "OriginalCompleteAfter": "withDisconnect.set(spy(new WithDisconnect(STR0 + vm.getId())));", "Before": "withDisconnect=spy(new WithDisconnect(STR0 + vm.getId()))", "After": "withDisconnect.set(spy(new WithDisconnect(STR0 + vm.getId())))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithDisconnectInEachVm", "LineNos": {"_1": 491, "_2": 504}, "Names": {"_1": "withDisconnect", "_2": "withDisconnect"}, "TemplateVariableToCodeBefore": {"TCIVar": "withDisconnect", "v0": "spy(new WithDisconnect(STR0 + vm.getId()))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withDisconnect", "v0": "spy(new WithDisconnect(STR0 + vm.getId()))"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withClose=spy(new WithClose(STR0 + vm.getId()));", "OriginalCompleteAfter": "withClose.set(spy(new WithClose(STR0 + vm.getId())));", "Before": "withClose=spy(new WithClose(STR0 + vm.getId()))", "After": "withClose.set(spy(new WithClose(STR0 + vm.getId())))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithCloseInRemoteVm", "LineNos": {"_1": 396, "_2": 405}, "Names": {"_1": "withClose", "_2": "withClose"}, "TemplateVariableToCodeBefore": {"TCIVar": "withClose", "v0": "spy(new WithClose(STR0 + vm.getId()))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withClose", "v0": "spy(new WithClose(STR0 + vm.getId()))"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withClose=spy(new WithClose());", "OriginalCompleteAfter": "withClose.set(spy(new WithClose()));", "Before": "withClose=spy(new WithClose())", "After": "withClose.set(spy(new WithClose()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithCloseInLocalVm", "LineNos": {"_1": 377, "_2": 385}, "Names": {"_1": "withClose", "_2": "withClose"}, "TemplateVariableToCodeBefore": {"TCIVar": "withClose", "v0": "spy(new WithClose())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withClose", "v0": "spy(new WithClose())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "withClose=spy(new WithClose(STR0 + vm.getId()));", "OriginalCompleteAfter": "withClose.set(spy(new WithClose(STR0 + vm.getId())));", "Before": "withClose=spy(new WithClose(STR0 + vm.getId()))", "After": "withClose.set(spy(new WithClose(STR0 + vm.getId())))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetWithCloseInEachVm", "LineNos": {"_1": 420, "_2": 430}, "Names": {"_1": "withClose", "_2": "withClose"}, "TemplateVariableToCodeBefore": {"TCIVar": "withClose", "v0": "spy(new WithClose(STR0 + vm.getId()))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "withClose", "v0": "spy(new WithClose(STR0 + vm.getId()))"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "closeable=mock(Closeable.class,STR0 + vm.getId());", "OriginalCompleteAfter": "closeable.set(mock(Closeable.class,STR0 + vm.getId()));", "Before": "closeable=mock(Closeable.class,STR0 + vm.getId())", "After": "closeable.set(mock(Closeable.class,STR0 + vm.getId()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetCloseableInRemoteVm", "LineNos": {"_1": 325, "_2": 331}, "Names": {"_1": "closeable", "_2": "closeable"}, "TemplateVariableToCodeBefore": {"TCIVar": "closeable", "v0": "mock(Closeable.class,STR0 + vm.getId())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "closeable", "v0": "mock(Closeable.class,STR0 + vm.getId())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "closeable=mock(Closeable.class);", "OriginalCompleteAfter": "closeable.set(mock(Closeable.class));", "Before": "closeable=mock(Closeable.class)", "After": "closeable.set(mock(Closeable.class))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetCloseableInLocalVm", "LineNos": {"_1": 306, "_2": 311}, "Names": {"_1": "closeable", "_2": "closeable"}, "TemplateVariableToCodeBefore": {"TCIVar": "closeable", "v0": "mock(Closeable.class)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "closeable", "v0": "mock(Closeable.class)"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "closeable=mock(Closeable.class,STR0 + vm.getId());", "OriginalCompleteAfter": "closeable.set(mock(Closeable.class,STR0 + vm.getId()));", "Before": "closeable=mock(Closeable.class,STR0 + vm.getId())", "After": "closeable.set(mock(Closeable.class,STR0 + vm.getId()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetCloseableInEachVm", "LineNos": {"_1": 349, "_2": 356}, "Names": {"_1": "closeable", "_2": "closeable"}, "TemplateVariableToCodeBefore": {"TCIVar": "closeable", "v0": "mock(Closeable.class,STR0 + vm.getId())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "closeable", "v0": "mock(Closeable.class,STR0 + vm.getId())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "autoCloseable=mock(AutoCloseable.class,STR0 + vm.getId());", "OriginalCompleteAfter": "autoCloseable.set(mock(AutoCloseable.class,STR0 + vm.getId()));", "Before": "autoCloseable=mock(AutoCloseable.class,STR0 + vm.getId())", "After": "autoCloseable.set(mock(AutoCloseable.class,STR0 + vm.getId()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetAutoCloseableInRemoteVm", "LineNos": {"_1": 254, "_2": 257}, "Names": {"_1": "autoCloseable", "_2": "autoCloseable"}, "TemplateVariableToCodeBefore": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class,STR0 + vm.getId())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class,STR0 + vm.getId())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "autoCloseable=mock(AutoCloseable.class);", "OriginalCompleteAfter": "autoCloseable.set(mock(AutoCloseable.class));", "Before": "autoCloseable=mock(AutoCloseable.class)", "After": "autoCloseable.set(mock(AutoCloseable.class))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetAutoCloseableInLocalVm", "LineNos": {"_1": 215, "_2": 217}, "Names": {"_1": "autoCloseable", "_2": "autoCloseable"}, "TemplateVariableToCodeBefore": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class)"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "autoCloseable=mock(AutoCloseable.class,STR0 + vm.getId());", "OriginalCompleteAfter": "autoCloseable.set(mock(AutoCloseable.class,STR0 + vm.getId()));", "Before": "autoCloseable=mock(AutoCloseable.class,STR0 + vm.getId())", "After": "autoCloseable.set(mock(AutoCloseable.class,STR0 + vm.getId()))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.SetAutoCloseableInEachVm", "LineNos": {"_1": 278, "_2": 282}, "Names": {"_1": "autoCloseable", "_2": "autoCloseable"}, "TemplateVariableToCodeBefore": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class,STR0 + vm.getId())"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class,STR0 + vm.getId())"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "autoCloseable=mock(AutoCloseable.class);", "OriginalCompleteAfter": "autoCloseable.set(mock(AutoCloseable.class));", "Before": "autoCloseable=mock(AutoCloseable.class)", "After": "autoCloseable.set(mock(AutoCloseable.class))", "Project": "geode", "Commit": "ae0d6bcdbc41a364b21bc5c55bd982271ad1284b", "CompilationUnit": "org.apache.geode.test.dunit.rules.tests.DistributedReferenceTest.DisableAutoCloseInLocalVm", "LineNos": {"_1": 234, "_2": 237}, "Names": {"_1": "autoCloseable", "_2": "autoCloseable"}, "TemplateVariableToCodeBefore": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "autoCloseable", "v0": "mock(AutoCloseable.class)"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "m_importers=builder.build();", "OriginalCompleteAfter": "m_importers.set(builder.build());", "Before": "m_importers=builder.build()", "After": "m_importers.set(builder.build())", "Project": "voltdb", "Commit": "4b697a4af25891fe9027e7f787ee75d073d6f863", "CompilationUnit": "org.voltdb.importer.ImporterLifeCycleManager", "LineNos": {"_1": 55, "_2": 56}, "Names": {"_1": "m_importers", "_2": "m_importers"}, "TemplateVariableToCodeBefore": {"TCIVar": "m_importers", "v0": "builder.build()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "m_importers", "v0": "builder.build()"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "sessionId=sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + STR0).lockDelay(configuration.getSessionLockDelay() + STR0).build()).getId();", "OriginalCompleteAfter": "sessionId.set(sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + STR0).lockDelay(configuration.getSessionLockDelay() + STR0).build()).getId());", "Before": "sessionId=sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + STR0).lockDelay(configuration.getSessionLockDelay() + STR0).build()).getId()", "After": "sessionId.set(sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + STR0).lockDelay(configuration.getSessionLockDelay() + STR0).build()).getId())", "Project": "camel", "Commit": "96a7cfdd691c35ca5c8d66de60103fa799aec9eb", "CompilationUnit": "org.apache.camel.component.consul.ha.ConsulClusterView", "LineNos": {"_1": 52, "_2": 47}, "Names": {"_1": "sessionId", "_2": "sessionId"}, "TemplateVariableToCodeBefore": {"TCIVar": "sessionId", "v0": "sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + STR0).lockDelay(configuration.getSessionLockDelay() + STR0).build()).getId()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "sessionId", "v0": "sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + STR0).lockDelay(configuration.getSessionLockDelay() + STR0).build()).getId()"}, "isRelevant": "Uses", "isSafe": true}]