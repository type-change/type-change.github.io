[{"OriginalCompleteBefore": "return functionMetadataManager.getFunctionMetadata(((CallExpression)expression).getFunctionHandle()).getOperatorType().orElse(null);", "OriginalCompleteAfter": "return functionMetadataManager.getFunctionMetadata(((CallExpression)expression).getFunctionHandle()).getOperatorType();", "Before": "functionMetadataManager.getFunctionMetadata(((CallExpression)expression).getFunctionHandle()).getOperatorType().orElse(null)", "After": "functionMetadataManager.getFunctionMetadata(((CallExpression)expression).getFunctionHandle()).getOperatorType()", "Project": "presto", "Commit": "5b66310654baf57a1d67a995e0b408eeaff076af", "CompilationUnit": "com.facebook.presto.spi.relation.LogicalRowExpressions.PushNegationVisitor", "LineNos": {"_1": 481, "_2": 736}, "Names": {"_1": "getOperator", "_2": "getOperator"}, "TemplateVariableToCodeBefore": {"v0": "functionMetadataManager.getFunctionMetadata(((CallExpression)expression).getFunctionHandle()).getOperatorType()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "functionMetadataManager.getFunctionMetadata(((CallExpression)expression).getFunctionHandle()).getOperatorType()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getGetterName(field))).findAny().orElse(null);", "OriginalCompleteAfter": "return Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getGetterName(field))).findAny();", "Before": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getGetterName(field))).findAny().orElse(null)", "After": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getGetterName(field))).findAny()", "Project": "lombok-intellij-plugin", "Commit": "a4ede6b25ae400dd23c8cc04acb1dec024c78199", "CompilationUnit": "de.plushnikov.intellij.plugin.intention.ReplaceWithLombokAnnotationAction", "LineNos": {"_1": 138, "_2": 162}, "Names": {"_1": "findAnchorFieldForGetter", "_2": "findAnchorFieldForGetter"}, "TemplateVariableToCodeBefore": {"v0": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getGetterName(field))).findAny()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getGetterName(field))).findAny()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getSetterName(field))).findAny().orElse(null);", "OriginalCompleteAfter": "return Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getSetterName(field))).findAny();", "Before": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getSetterName(field))).findAny().orElse(null)", "After": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getSetterName(field))).findAny()", "Project": "lombok-intellij-plugin", "Commit": "a4ede6b25ae400dd23c8cc04acb1dec024c78199", "CompilationUnit": "de.plushnikov.intellij.plugin.intention.ReplaceWithLombokAnnotationAction", "LineNos": {"_1": 84, "_2": 107}, "Names": {"_1": "findAnchorFieldForSetter", "_2": "findAnchorFieldForSetter"}, "TemplateVariableToCodeBefore": {"v0": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getSetterName(field))).findAny()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "Optional.ofNullable(method.getContainingClass()).map(PsiClassUtil::collectClassFieldsIntern).orElse(Collections.emptyList()).stream().filter(field -> method.getName().equals(LombokUtils.getSetterName(field))).findAny()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getParameters().stream().filter(p -> p.getType().toString().equals(type.getSimpleName())).findFirst().orElse(null);", "OriginalCompleteAfter": "return getParameters().stream().filter(p -> p.getType().toString().equals(type.getSimpleName())).findFirst();", "Before": "getParameters().stream().filter(p -> p.getType().toString().equals(type.getSimpleName())).findFirst().orElse(null)", "After": "getParameters().stream().filter(p -> p.getType().toString().equals(type.getSimpleName())).findFirst()", "Project": "javaparser", "Commit": "1ff8db9b9d9fdd6c9655d9d37761a00e98ab6d04", "CompilationUnit": "com.github.javaparser.ast.nodeTypes.NodeWithParameters", "LineNos": {"_1": 117, "_2": 119}, "Names": {"_1": "getParamByType", "_2": "getParameterByType"}, "TemplateVariableToCodeBefore": {"v0": "getParameters().stream().filter(p -> p.getType().toString().equals(type.getSimpleName())).findFirst()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getParameters().stream().filter(p -> p.getType().toString().equals(type.getSimpleName())).findFirst()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getParameters().stream().filter(p -> p.getType().toString().equals(type)).findFirst().orElse(null);", "OriginalCompleteAfter": "return getParameters().stream().filter(p -> p.getType().toString().equals(type)).findFirst();", "Before": "getParameters().stream().filter(p -> p.getType().toString().equals(type)).findFirst().orElse(null)", "After": "getParameters().stream().filter(p -> p.getType().toString().equals(type)).findFirst()", "Project": "javaparser", "Commit": "1ff8db9b9d9fdd6c9655d9d37761a00e98ab6d04", "CompilationUnit": "com.github.javaparser.ast.nodeTypes.NodeWithParameters", "LineNos": {"_1": 106, "_2": 108}, "Names": {"_1": "getParamByType", "_2": "getParameterByType"}, "TemplateVariableToCodeBefore": {"v0": "getParameters().stream().filter(p -> p.getType().toString().equals(type)).findFirst()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getParameters().stream().filter(p -> p.getType().toString().equals(type)).findFirst()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getParameters().stream().filter(p -> p.getNameAsString().equals(name)).findFirst().orElse(null);", "OriginalCompleteAfter": "return getParameters().stream().filter(p -> p.getNameAsString().equals(name)).findFirst();", "Before": "getParameters().stream().filter(p -> p.getNameAsString().equals(name)).findFirst().orElse(null)", "After": "getParameters().stream().filter(p -> p.getNameAsString().equals(name)).findFirst()", "Project": "javaparser", "Commit": "1ff8db9b9d9fdd6c9655d9d37761a00e98ab6d04", "CompilationUnit": "com.github.javaparser.ast.nodeTypes.NodeWithParameters", "LineNos": {"_1": 95, "_2": 97}, "Names": {"_1": "getParamByName", "_2": "getParameterByName"}, "TemplateVariableToCodeBefore": {"v0": "getParameters().stream().filter(p -> p.getNameAsString().equals(name)).findFirst()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getParameters().stream().filter(p -> p.getNameAsString().equals(name)).findFirst()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getAnnotations().stream().filter(a -> a.getName().getIdentifier().equals(annotationName)).findFirst().orElse(null);", "OriginalCompleteAfter": "return getAnnotations().stream().filter(a -> a.getName().getIdentifier().equals(annotationName)).findFirst();", "Before": "getAnnotations().stream().filter(a -> a.getName().getIdentifier().equals(annotationName)).findFirst().orElse(null)", "After": "getAnnotations().stream().filter(a -> a.getName().getIdentifier().equals(annotationName)).findFirst()", "Project": "javaparser", "Commit": "1ff8db9b9d9fdd6c9655d9d37761a00e98ab6d04", "CompilationUnit": "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", "LineNos": {"_1": 160, "_2": 161}, "Names": {"_1": "getAnnotationByName", "_2": "getAnnotationByName"}, "TemplateVariableToCodeBefore": {"v0": "getAnnotations().stream().filter(a -> a.getName().getIdentifier().equals(annotationName)).findFirst()"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getAnnotations().stream().filter(a -> a.getName().getIdentifier().equals(annotationName)).findFirst()"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return getComment().flatMap(c -> Optional.of((JavadocComment)c)).orElse(null);", "OriginalCompleteAfter": "return getComment().flatMap(c -> Optional.of((JavadocComment)c));", "Before": "getComment().flatMap(c -> Optional.of((JavadocComment)c)).orElse(null)", "After": "getComment().flatMap(c -> Optional.of((JavadocComment)c))", "Project": "javaparser", "Commit": "95b23316b23f42f7ad8fd9253dc9606a6f53c569", "CompilationUnit": "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", "LineNos": {"_1": 39, "_2": 39}, "Names": {"_1": "getJavadocComment", "_2": "getJavadocComment"}, "TemplateVariableToCodeBefore": {"v0": "getComment().flatMap(c -> Optional.of((JavadocComment)c))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "getComment().flatMap(c -> Optional.of((JavadocComment)c))"}, "isRelevant": "Returns", "isSafe": true}]