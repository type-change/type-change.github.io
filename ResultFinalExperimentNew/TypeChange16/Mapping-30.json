[{"OriginalCompleteBefore": "return (ClassOrInterfaceDeclaration)getTypes().stream().filter(type -> type.getNameAsString().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().orElse(null);", "OriginalCompleteAfter": "return getTypes().stream().filter(type -> type.getNameAsString().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().map(t -> (ClassOrInterfaceDeclaration)t);", "Before": "(ClassOrInterfaceDeclaration)getTypes().stream().filter(type -> type.getNameAsString().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().orElse(null)", "After": "getTypes().stream().filter(type -> type.getNameAsString().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().map(t -> (ClassOrInterfaceDeclaration)t)", "Project": "javaparser", "Commit": "1ff8db9b9d9fdd6c9655d9d37761a00e98ab6d04", "CompilationUnit": "com.github.javaparser.ast.CompilationUnit", "LineNos": {"_1": 401, "_2": 402}, "Names": {"_1": "getInterfaceByName", "_2": "getInterfaceByName"}, "TemplateVariableToCodeBefore": {"v0": "getTypes().stream().filter(type -> type.getNameAsString().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration)type).isInterface()).findFirst()"}, "RelevantImports": ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration"], "TemplateVariableToCodeAfter": {"v0": "getTypes().stream().filter(type -> type.getNameAsString().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration)type).isInterface()).findFirst()"}, "isRelevant": "Returns", "isSafe": false}, {"OriginalCompleteBefore": "return (ClassOrInterfaceDeclaration)getTypes().stream().filter(type -> type.getNameAsString().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().orElse(null);", "OriginalCompleteAfter": "return getTypes().stream().filter(type -> type.getNameAsString().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().map(t -> (ClassOrInterfaceDeclaration)t);", "Before": "(ClassOrInterfaceDeclaration)getTypes().stream().filter(type -> type.getNameAsString().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().orElse(null)", "After": "getTypes().stream().filter(type -> type.getNameAsString().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration)type).isInterface()).findFirst().map(t -> (ClassOrInterfaceDeclaration)t)", "Project": "javaparser", "Commit": "1ff8db9b9d9fdd6c9655d9d37761a00e98ab6d04", "CompilationUnit": "com.github.javaparser.ast.CompilationUnit", "LineNos": {"_1": 389, "_2": 390}, "Names": {"_1": "getClassByName", "_2": "getClassByName"}, "TemplateVariableToCodeBefore": {"v0": "getTypes().stream().filter(type -> type.getNameAsString().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration)type).isInterface()).findFirst()"}, "RelevantImports": ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration"], "TemplateVariableToCodeAfter": {"v0": "getTypes().stream().filter(type -> type.getNameAsString().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration)type).isInterface()).findFirst()"}, "isRelevant": "Returns", "isSafe": false}]