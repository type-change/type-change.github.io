[{"OriginalCompleteBefore": "LOG.info(STR0 + runCount.intValue());", "OriginalCompleteAfter": "LOG.info(STR0 + runCount);", "Before": "runCount.intValue()", "After": "runCount", "Project": "hadoop", "Commit": "bee9f57f5ca9f037ade932c6fd01b0dad47a1296", "CompilationUnit": "org.apache.hadoop.hdfs.server.diskbalancer.TestDiskBalancerWithMockMover.TestMover", "LineNos": {"_1": 361, "_2": 361}, "Names": {"_1": "runCount", "_2": "runCount"}, "TemplateVariableToCodeBefore": {"TCIVar": "runCount"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "runCount"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "return SourceVersion.valueOf(majorVersion.intValue());", "OriginalCompleteAfter": "return SourceVersion.valueOf(majorVersion);", "Before": "majorVersion.intValue()", "After": "majorVersion", "Project": "j2objc", "Commit": "c025bffe13d3184a9e802795d844fa0af4bd1c45", "CompilationUnit": "com.google.devtools.j2objc.util.SourceVersion", "LineNos": {"_1": 80, "_2": 80}, "Names": {"_1": "majorVersion", "_2": "majorVersion"}, "TemplateVariableToCodeBefore": {"TCIVar": "majorVersion"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "majorVersion"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "dest.writeInt(mIntProp.intValue());", "OriginalCompleteAfter": "dest.writeInt(mIntProp);", "Before": "mIntProp.intValue()", "After": "mIntProp", "Project": "platform_frameworks_base", "Commit": "ba6b4b400d850ba18fcb9d5bf9789d490f390acc", "CompilationUnit": "android.media.audiopolicy.AudioMixingRule.AttributeMatchCriterion", "LineNos": {"_1": 96, "_2": 96}, "Names": {"_1": "mIntProp", "_2": "mIntProp"}, "TemplateVariableToCodeBefore": {"TCIVar": "mIntProp"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "mIntProp"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "PoolImpl p=(PoolImpl)PoolManager.createFactory().addServer(host,port1.intValue()).setSubscriptionEnabled(false).setThreadLocalConnections(true).setMinConnections(1).setReadTimeout(20000).setPingInterval(10000).setRetryAttempts(1).create(STR0);", "OriginalCompleteAfter": "PoolImpl pool=(PoolImpl)PoolManager.createFactory().addServer(host,port).setSubscriptionEnabled(false).setThreadLocalConnections(true).setMinConnections(1).setReadTimeout(20000).setPingInterval(10000).setRetryAttempts(1).create(getClass().getSimpleName());", "Before": "port1.intValue()", "After": "port1", "Project": "geode", "Commit": "e55082a280ad65d47933400dcc4a575834fe7cae", "CompilationUnit": "org.apache.geode.cache.CacheRegionClearStatsDUnitTest", "LineNos": {"_1": 123, "_2": 143}, "Names": {"_1": "port1", "_2": "port"}, "TemplateVariableToCodeBefore": {"TCIVar": "port1"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "port1"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "PoolImpl p=(PoolImpl)PoolManager.createFactory().addServer(host,port1.intValue()).setSubscriptionEnabled(false).setThreadLocalConnections(true).setMinConnections(1).setReadTimeout(20000).setPingInterval(10000).setRetryAttempts(1).create(STR0);", "OriginalCompleteAfter": "PoolImpl pool=(PoolImpl)PoolManager.createFactory().addServer(host,port).setSubscriptionEnabled(false).setThreadLocalConnections(true).setMinConnections(1).setReadTimeout(20000).setPingInterval(10000).setRetryAttempts(1).create(getClass().getSimpleName());", "Before": "port1.intValue()", "After": "port1", "Project": "geode", "Commit": "e55082a280ad65d47933400dcc4a575834fe7cae", "CompilationUnit": "org.apache.geode.cache.CacheRegionClearStatsDUnitTest", "LineNos": {"_1": 80, "_2": 124}, "Names": {"_1": "port1", "_2": "port"}, "TemplateVariableToCodeBefore": {"TCIVar": "port1"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "port1"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "executors.execute(new Runnable(){  public void run(){    try {      for (int j=0; j < SIZE / POOL; j++) {        producer.sendBody(STR0,STR1 + idx.intValue() * j + j);      }    }  finally {      latch.countDown();    }  }});", "OriginalCompleteAfter": "executors.execute(new Runnable(){  public void run(){    try {      for (int j=0; j < SIZE / POOL; j++) {        producer.sendBody(STR0,STR1 + idx * j + j);      }    }  finally {      latch.countDown();    }  }});", "Before": "idx.intValue()", "After": "idx", "Project": "camel", "Commit": "06f0a6c0974ae98cd2680ab06d73a6cac699551e", "CompilationUnit": "org.apache.camel.example.client.CamelClient", "LineNos": {"_1": 58, "_2": 58}, "Names": {"_1": "idx", "_2": "idx"}, "TemplateVariableToCodeBefore": {"TCIVar": "idx"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "idx"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "Pool p=PoolManager.createFactory().addServer(host,port1.intValue()).addServer(host,port2.intValue()).setSubscriptionEnabled(true).setMinConnections(4).create(STR0);", "OriginalCompleteAfter": "Pool pool=PoolManager.createFactory().addServer(hostName,port1).addServer(hostName,port2).setSubscriptionEnabled(true).setMinConnections(4).create(uniqueName);", "Before": "port2.intValue()", "After": "port2", "Project": "geode", "Commit": "3968b947adca6e88b5edc3478d32b54432577941", "CompilationUnit": "org.apache.geode.internal.cache.tier.sockets.Bug36457DUnitTest", "LineNos": {"_1": 101, "_2": 129}, "Names": {"_1": "port2", "_2": "port2"}, "TemplateVariableToCodeBefore": {"TCIVar": "port2"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "port2"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "Pool p=PoolManager.createFactory().addServer(host,port1.intValue()).addServer(host,port2.intValue()).setSubscriptionEnabled(true).setMinConnections(4).create(STR0);", "OriginalCompleteAfter": "Pool pool=PoolManager.createFactory().addServer(hostName,port1).addServer(hostName,port2).setSubscriptionEnabled(true).setMinConnections(4).create(uniqueName);", "Before": "port1.intValue()", "After": "port1", "Project": "geode", "Commit": "3968b947adca6e88b5edc3478d32b54432577941", "CompilationUnit": "org.apache.geode.internal.cache.tier.sockets.Bug36457DUnitTest", "LineNos": {"_1": 101, "_2": 129}, "Names": {"_1": "port1", "_2": "port1"}, "TemplateVariableToCodeBefore": {"TCIVar": "port1"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "port1"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "if((expectedResult.intValue() == NOTAUTHZ_EXCEPTION) && (ex.getCause() instanceof NotAuthorizedException))", "OriginalCompleteAfter": "if((expectedResult == NOTAUTHZ_EXCEPTION) && (ex.getCause() instanceof NotAuthorizedException))", "Before": "expectedResult.intValue()", "After": "expectedResult", "Project": "geode", "Commit": "22ca5ef829fee20024d44264b3839ee745916975", "CompilationUnit": "com.gemstone.gemfire.security.SecurityTestUtil", "LineNos": {"_1": 1057, "_2": 1406}, "Names": {"_1": "expectedResult", "_2": "expectedResult"}, "TemplateVariableToCodeBefore": {"TCIVar": "expectedResult"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "expectedResult"}, "isRelevant": "Uses", "isSafe": true}, {"OriginalCompleteBefore": "if((expectedResult.intValue() == NOTAUTHZ_EXCEPTION) && (ex.getCause() instanceof NotAuthorizedException))", "OriginalCompleteAfter": "if((expectedResult == NOTAUTHZ_EXCEPTION) && (ex.getCause() instanceof NotAuthorizedException))", "Before": "expectedResult.intValue()", "After": "expectedResult", "Project": "geode", "Commit": "22ca5ef829fee20024d44264b3839ee745916975", "CompilationUnit": "com.gemstone.gemfire.security.SecurityTestUtil", "LineNos": {"_1": 1381, "_2": 1096}, "Names": {"_1": "expectedResult", "_2": "expectedResult"}, "TemplateVariableToCodeBefore": {"TCIVar": "expectedResult"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"TCIVar": "expectedResult"}, "isRelevant": "Uses", "isSafe": true}]