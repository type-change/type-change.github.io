[{"OriginalCompleteBefore": "final Stream<DiscoveryNode> actualNodes=StreamSupport.stream(peerFinder.getFoundPeers().spliterator(),false);", "OriginalCompleteAfter": "final List<DiscoveryNode> actualNodesList=StreamSupport.stream(peerFinder.getFoundPeers().spliterator(),false).collect(Collectors.toList());", "Before": "StreamSupport.stream(peerFinder.getFoundPeers().spliterator(),false)", "After": "StreamSupport.stream(peerFinder.getFoundPeers().spliterator(),false).collect(Collectors.toList())", "Project": "elasticsearch", "Commit": "229637fd7e9f26e3345b955e3a14148664d9ae60", "CompilationUnit": "org.elasticsearch.discovery.PeerFinderTests", "LineNos": {"_1": 753, "_2": 775}, "Names": {"_1": "actualNodes", "_2": "actualNodesList"}, "TemplateVariableToCodeBefore": {"v0": "StreamSupport.stream(peerFinder.getFoundPeers().spliterator(),false)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "StreamSupport.stream(peerFinder.getFoundPeers().spliterator(),false)"}, "isRelevant": "AssignedTo", "isSafe": true}, {"OriginalCompleteBefore": "return users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username));", "OriginalCompleteAfter": "return users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username)).collect(Collectors.toList());", "Before": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username))", "After": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username)).collect(Collectors.toList())", "Project": "keycloak", "Commit": "edef93cd491e545de642fd39d0df0a53cecee830", "CompilationUnit": "org.keycloak.testsuite.federation.BackwardsCompatibilityUserStorage", "LineNos": {"_1": 323, "_2": 326}, "Names": {"_1": "getUsersStream", "_2": "getUsers"}, "TemplateVariableToCodeBefore": {"v0": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username))"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "users.values().stream().skip(firstResult).limit(maxResults).map(myUser -> createUser(realm,myUser.username))"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return classpathContents.stream().map(File::getAbsolutePath);", "OriginalCompleteAfter": "return classpathContents.stream().map(File::getAbsolutePath).collect(Collectors.toList());", "Before": "classpathContents.stream().map(File::getAbsolutePath)", "After": "classpathContents.stream().map(File::getAbsolutePath).collect(Collectors.toList())", "Project": "beam", "Commit": "73325c726fe1c772f5d1965a3de857b7479d42cd", "CompilationUnit": "org.apache.beam.runners.core.construction.resources.ClasspathScanningResourcesDetector", "LineNos": {"_1": 39, "_2": 39}, "Names": {"_1": "detect", "_2": "detect"}, "TemplateVariableToCodeBefore": {"v0": "classpathContents.stream().map(File::getAbsolutePath)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "classpathContents.stream().map(File::getAbsolutePath)"}, "isRelevant": "Returns", "isSafe": true}, {"OriginalCompleteBefore": "return msgs.stream().map(HL7v2Message::fromModel);", "OriginalCompleteAfter": "return msgs.stream().map(HL7v2Message::fromModel).collect(Collectors.toList());", "Before": "msgs.stream().map(HL7v2Message::fromModel)", "After": "msgs.stream().map(HL7v2Message::fromModel).collect(Collectors.toList())", "Project": "beam", "Commit": "ef2136b6727e3c0d1f67dd0aee957e54f852ee00", "CompilationUnit": "org.apache.beam.sdk.io.gcp.healthcare.HttpHealthcareApiClient.HL7v2MessagePages.HL7v2MessagePagesIterator", "LineNos": {"_1": 401, "_2": 552}, "Names": {"_1": "next", "_2": "next"}, "TemplateVariableToCodeBefore": {"v0": "msgs.stream().map(HL7v2Message::fromModel)"}, "RelevantImports": [], "TemplateVariableToCodeAfter": {"v0": "msgs.stream().map(HL7v2Message::fromModel)"}, "isRelevant": "Returns", "isSafe": true}]